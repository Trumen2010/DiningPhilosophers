@startuml
'https://plantuml.com/class-diagram

class Canvas
class Controller
class EventData
class Fork
class ForkViewObject
class HandViewObject
class Philosopher
class PhilosopherViewObject
class View

Controller "1  " *--|> "3..*  " Fork
Controller "1 " --|> "3..*   " Philosopher
Fork "2"<|- "1" Philosopher: \t
Philosopher  "uses" --> EventData
View "1" <|- "1" Controller: \t
Canvas "1" <|- "1" View: \t
Canvas "1    " *-|> "0..* " ForkViewObject
HandViewObject "0..*" <|-* "1" Canvas: \t\t
PhilosopherViewObject "0..* " <|-* "1   " Canvas
PhilosopherViewObject "1    " <|-- "1" HandViewObject
HandViewObject "1" --|> "1   " ForkViewObject


class Controller {
-view: View
-forks: Fork[]
-amount: int
+Controller(amount: int)
+createView(): void
+startPhilosopherThreads(): void
+showView(): void
+createForks(): void
+update(o: Observable, arg: Object): void
}

class Canvas {
-amount: int
-philosophersArray: PhilosopherViewObject[]
-killLines : boolean[]
-forksArray: ForkViewObject[]
-handsArrayList: ArrayList<HandViewObject>
+Canvas(amount: int)
+paintComponent(g: Graphics): void
+calcPhilosophersCoordinates(numberOfCircle: int): PhilosopherViewObject
+calcForksCoordinates(numberOfFork: int): ForkViewObject
+killPhilosopher(idOfPhilosopher: int): void
+PhilosopherGrabsFork(idOfPhilosopher:int, idOfFork: int): void
+PhilosopherDropsFork(idOfPhilosopher:int, idOfFork: int): void
+setPhilosophersArray(): void
+setKillines(): void
+setForkArray(): void
}

class EventData {
-event: int
-philosopherID: int
+EventData(event: int, philosopherID: int)
+getEvent(): int
+getPhilosopherID(): int
}

class Fork {
-permit: boolean
+Fork()
+grab(): boolean
+drop(): void
}

class ForkViewObject {
-x1: int
-y1: int
-x2: int
-y2: int
-id: final int
+ForkViewObject(x1: int, y1: int, x2: int, y2: int, id: int)
+getX1(): int
+getY1(): int
+getX2(): int
+getY2(): int
+getId(): int
}

class HandViewObject {
-fork: ForkViewObject
-philosopher: PhilosopherViewObject
+HandViewObject(fork: ForkViewObject, philosopher: PhilosopherViewObject)
+getFork(): ForkViewObject
+getPhilosopher(): PhilosopherViewObject
}

class Philosopher {
-leftfork: Fork
-rightfork: Fork
-id: int
-millisecondsSinceLastMeal: long
+eat(): void
+philosophize(): void
+pause(): void
+run(): void
}

class PhilosopherViewObject{
-x: int
-y: int
-r: int
-id: final int
+PhilosopherViewObject(x: int, y: int, r: int, idOfPhilosopher: int)
+getX(): int
+getY(): int
+getR(): int
+getId(): int
}

class View{
-amount: int
-canvas: Canvas
+View(amount: int)
+killPhilosopher(idOfPhilosopher: int): void
+philosopherGrabsFork(idOfPhilosopher: int, idOfFork: int): void
+philosopherDropsFork(idOfPhilosopher: int, idOfFork: int): void
}

@enduml